import os

arch=os.uname()[4].lower()
ostype=os.uname()[0].lower()
cctype='gnu'

def normalise(str):
  return str.replace(' ', '').replace('_', '-')

basepath = normalise('src/' + ostype + '-' + arch + '/')
basepath_wcc = normalise('src/' + ostype + '-' + arch + '-' + cctype + '/')
genericpath = 'src/generic/'

codepreference = [ 'S', 's', 'c' ]

def fileexists(name):
  try:
    os.stat(name)
    return True
  except:
    return False


def haveasm(name):
  global basepath, basepath_wcc

  return fileexists(basepath_wcc + name + '.S') or \
         fileexists(basepath_wcc + name + '.s') or \
         fileexists(basepath + name + '.S') or \
         fileexists(basepath + name + '.s')

def findsource(name):
  global codepreference, basepath, basepath_wcc, genericpath
  for l in [basepath_wcc, basepath, genericpath]:
    for i in codepreference:
      n = l + name + '.' + i
      if fileexists(n):
        return n

def writepkgconfig():
  return False

env = Environment()

if haveasm('atom'):
  print 'adjusting linker flags for using assembly atomic-libc'
  env.Append(CFLAGS = '-ffreestanding', LINKFLAGS = '-static -nostdlib -nostartfiles -nodefaultlibs', CPPPATH='include')
else:
  print 'adjusting linker flags for using host-libc based atomic-libc'

# LIBRARY FILES

sourcefiles = [ 'atom' ]

sf = []

for i in sourcefiles:
  f = findsource(i)
  sf += [ f ]

env.StaticLibrary('atomic', sf)
env.Program('testsuite', [sf, 'src/test-suite.c'])
