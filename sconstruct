import os

arch=os.uname()[4].lower()
ostype=os.uname()[0].lower()
cctype='gnu'

def normalise(str):
  return str.replace(' ', '').replace('_', '-')

paths = [ normalise('src/' + ostype + '-' + arch + '-' + cctype + '/'),
          normalise('src/' + ostype + '-' + arch + '/'),
          normalise('src/' + ostype + '/'),
          'src/generic/' ]

codepreference = [ 'S', 's', 'c' ]

def fileexists(name):
  try:
    os.stat(name)
    return True
  except:
    return False


def haveasm(name):
  global paths
  
  for i in paths:
    if fileexists(i + name + '.S') or fileexists(i + name + '.s'):
      return True

  return False

def findsource(name):
  global codepreference, paths
  for l in paths:
    for i in codepreference:
      n = l + name + '.' + i
      if fileexists(n):
        return n

def writepkgconfig():
  return False

env = Environment()

env.Append(LIBPATH = '.', CPPPATH='#include', CFLAGS='--std=c99 -Wall -pedantic -g')

if haveasm('atom') and haveasm('memory'):
  print 'adjusting linker flags for using assembly atomic-libc'
  env.Append(CFLAGS = '-ffreestanding',
             LINKFLAGS = '-static -nostdlib -nostartfiles -nodefaultlibs')
else:
  print 'adjusting linker flags for using host-libc based atomic-libc'

# LIBRARY FILES

sourcefiles = [ 'atom', 'sexpr', 'io', 'memory-pool', 'memory', 'tree', 'exec', 'progress', 'immutable' ]

sf = []

for i in sourcefiles:
  sf += [ findsource(i) ]

env.StaticLibrary('atomic', sf)

import glob
testsource = glob.glob('tests/*.c');

tenv = env.Clone()
tenv.Append(LIBS = ['atomic'], CFLAGS = '-g')

for i in testsource:
  tenv.Program(i)
