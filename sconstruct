# LIBRARY FILES
sourcefiles = [ 'bootstrap', 'atom', 'sexpr', 'io', 'memory-pool',
                'memory', 'tree', 'exec', 'progress', 'immutable', 'string',
                'memory-allocator', 'sexpr-library', 'sexpr-read-write' ]

needforstandalone = [ 'atom', 'memory', 'bootstrap' ]

debug = False
optimise = True

import os

arch=os.uname()[4].lower()
ostype=os.uname()[0].lower()
cctype='gnu'

def normalise(str):
  return str.replace(' ', '').replace('_', '-')

paths = [ normalise(ostype + '-' + arch + '-' + cctype + '/'),
          normalise(ostype + '-' + arch + '/'),
          normalise(ostype + '-' + cctype + '/'),
          normalise(ostype + '/'),
          normalise(arch + '-' + cctype + '/'),
          normalise(arch + '/'),
          normalise('posix-' + arch + '-' + cctype + '/'),
          normalise('posix-' + arch + '/'),
          normalise('posix-' + cctype + '/'),
          normalise('posix/'),
          normalise(cctype + '/'),
          'generic/' ]

codepreference = [ 'S', 's', 'c' ]

def fileexists(name):
  try:
    os.stat(name)
    return True
  except:
    return False


def haveasm(name):
  global paths

  for i in paths:
    if fileexists('src/' + i + name + '.S') or fileexists('src/' + i + name + '.s'):
      return True

  return False

def findsource(name):
  global codepreference, paths
  for l in paths:
    for i in codepreference:
      n = 'src/' + l + name + '.' + i
      if fileexists(n):
        return n

def writepkgconfig():
  return False

def standalone():
  global needforstandalone

  for i in needforstandalone:
    if not haveasm(i):
      return False

  return True

env = Environment()

for i in paths:
  if fileexists('include/' + i):
    env.Append (CPPPATH = '#include/' + i)

env.Append(LIBPATH = '.', CFLAGS='--std=c99 -Wall -pedantic')

if debug:
  env.Append(CFLAGS='-g')

if optimise:
  env.Append(CFLAGS='-O2')

if standalone():
  print 'adjusting linker flags for using assembly atomic-libc'
  env.Append(CFLAGS = '-ffreestanding',
             LINKFLAGS = '-static -nostdlib -nostartfiles -nodefaultlibs -u _start')
else:
  print 'adjusting linker flags for using host-libc based atomic-libc'

sf = []

for i in sourcefiles:
  sf += [ findsource(i) ]

env.StaticLibrary('atomic', sf)

import glob
testsource = glob.glob('tests/*.c');

tenv = env.Clone()
tenv.Append(LIBS = ['atomic'])

for i in testsource:
  tenv.Program(i)
