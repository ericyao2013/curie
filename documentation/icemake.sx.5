.TH ICEMAKE.SX 5 "JULY 2009" Curie "Curie Developers Manual"

.SH NAME
icemake.sx \- build description file for icemake

.SH DESCRIPTION
.B icemake.sx
is a text file containing data in s-expression form for icemake to use when
building a project. The file is a sequence of definitions that describe
programmes and libraries through the code and addon files they are to be built
from.

.SH Build Targets
From icemake's point of view, each base element in the icemake.sx file
represents a potential build target. The basic layout of these build targets is
as follows:

.B (
.I type target-name libc-type options
.B )

.I target-name
is the build target identifier that icemake uses to identify programmes; it's
also the base for output/installation files.
.I libc-type
is either
.I libcurie
or
.I libc
which stand for curie and plain host libcs, respectively. Additionally it is
legitimate to add
.I hosted
after the libc name, which only really makes sense for libcurie targets that
are known to require features from the host libc (for example the printf()
function). Even if programmes are not tagged as "hosted", they may still get
linked against the host libc if icemake determines that this is likely to be
necessary (usually that would be because libcurie has been determined not to be
freestanding, or because c++ is used for some of the files, which unfortunately
requires the host libc on pretty much all targets so that exceptions work as
intended; on the bright side, in the latter case the target programme will still
not link against libstdc++ by default). The possible
.I options
are described in the next section.

.I type
may be one of these:

.IP programme
An executable that may be executed directly.
.I target-name
corresponds to the name of the final binary (possibly modified to suit target
OS preferences, for example ".exe" would be appended on windows systems).

.IP library
A library that may later be linked to.
.I target-name
is modified according to the typical library naming conventions on the target
system. Usually this involves prepending "lib" and appending ".so"/".dll" for
dynamically linked libraries or ".a"/".lib" for statically linked libraries.

.IP documentation
Documentation files, usually you'd use this if you'd just like to wrap a few
bits of documentation together without building a programme, or if you intended
to make the documentation for a project a separate build target.

.SH Options
Options look like this:

.B (
.I type data
.B )

The interpretation of the data component depends on the type identifier. Allowed
identifiers are:

.IP name
A human-readable name for the build target; must be a string.

Example: (name "Foo")

.IP description
A plain-text description of the build target; must be a string.

Example: (description "My fair programme.")

.IP version
The version string for the target, mostly relevant when building libraries as it
affects the name of the output file; must be a string.

Example: (version "10")

.IP url
URL to the project's website or other relevant information; must be a string.

Example: (url "http://foo.org/")

.IP code
A list of code files that the programme or library is composed of. All elements
must be found for icemake to even attempt to build the target.

Example: (code "foo" "bar")

This example would make icemake search for a "foo.c++", "foo.c", "foo.S" or
"foo.s" under src/, in that order (with the typical rules for directory names).
Afterwards, the same is done with "bar.c++", "bar.c", etc. Note that when also
building a library, icemake needs to build "regular" as well as "pic" variants
of code files, one for static libraries and one for dynamically loaded
libraries. for this reason, assembly files may provide an extra ".pic.S" or
".pic.s" variant, which is searched for when an assembly representation of a
file is chosen. Not all architectures require extra PIC code, but those that do
require PIC variants of assembly files whenever globally accessible variables
are used. For more hints on how to use this, check the curie tarball's
src/linux/x86-64 directory.

.IP headers
A list of header files that would be installed along with a library. All
elements must be found for icemake to attempt building the target.

Example: (headers "foo" "bar")

This example would make icemake search for a "target-name/foo.h" under
include/ (with the typical rules for directory names).
Afterwards, the same is done with "target-name/bar.h". The install path also
includes the target-name parameter; this allows (and enforces) a clean
separation of headers for libraries.

.IP test-cases
This is quite similar to the code option, with the same lookup rules (except
this time under tests/ instead of src/ and only for .c++ and .c files). The code
files need to present, and upon execution of a programme built from them, they
are expected to return 0 for a successful test and any nonzero value for a
failed test. This latter, non-zero return value should be distinct for each
possible issue that the test case uncovers, thus aiding in pinpointing a
particular problem that the test case is designed to uncover.

Example: (test-cases "foo" "bar")

.IP test-case-reference
For use with test cases. This lists file pairs that should be equal after the
test suite is run. Quite useful for checking I/O functions. All of the generated
files are unlinked before the test suite is run. Each of the data elements
should look like this:

.B (
.I A
.B .
.I B
.B )

Where
.I A
is the generated file (or rather the one that will be generated), and
.I B
is a reference file that
.I A
will be compared against (using the diff tool, which consequently needs to be
available and in icemake's PATH). Both of these need to be paths relative to
the icemake.sx file.

Example: (test-case-reference ("foo" . "tests/reference/foo"))

.IP documentation
Again a list similar to the one that describes code files. Icemake will look for
this option's elements under documentation/, either as LaTeX or roff files in
man page format.

Example: (documentation "description" "foo")

.IP libraries
This option is used to list libraries that are needed for a programme to link
properly. They're translated to "-lfoo" statements for gcc (or similar
statements for other toolchains). Note that the search path for the called
linker is modified, so that libraries built from the current icemake.sx file are
first in the linker's search path, thus allowing a single icemake.sx file to
contain descriptions for both a library and programmes that use it. Note that
icemake will favour a static link over a dynamic link against libraries by
default.

Example: (libraries "foo" "bar")

.IP data
These files are searched for under data/ and then put under /etc/target-name
(or similar places, depending on the file hierarchy scheme in use) when
installing a programme. The usual lookup rules apply, except that unlike the
other file lists no extensions are added to these files, so the filenames are
used verbatim.

Example: (data "foo.config")

.IP freestanding-if-assembly
This is mostly a hack to allow icemake to build curie itself and effectively
determine if the compiled version of curie requires linking against the host
libc. Since the only way to avoid linking against the host libc is by using
assembly files, this option specifies which assembly files need to be present
for the library to sustain itself, and since the files here are searched for in
accordance with the general file lookup rules, you're free to have different
assembly files for each target.

For an example, have a look at curie's icemake.sx.

.SH File Lookup
Whenever a file is searched for, icemake tries a series of paths to find a file
in. All of these files depend on the
.I target chost
that is specified to icemake (or the implicit one if a target is omitted). After
the chost is parsed in the typical
.IB arch -
.IB vendor -
.IB os -
.IB toolchain
way, icemake will
search for the files in a path like this:

.IB prefix /
.IB internal-or-debug /
.IB os /
.IB arch /
.IB toolchain /
.IB vendor /

.I prefix
is the base directory, as described for each of the options in the last section,
i.e. "src" for code files.
.I internal-or-debug
is either "internal", which is mostly of use for header files, or with the the
-D flag to icemake it may also be "debug".
.I os
is the short name of the operationg system or the general class of operating
system, for example "windows", "linux", "posix", "ansi" or "generic".
.I arch
is the code for the architecture; note that even though the arch in the chost
would use underscores (due to the name of compiler binaries), all path
components *always* use regular dashes, because i think underscores look ugly as
fuck. So, instead of <yuck>
.B x86_64
, icemake will instead search for
.B x86-64
, which i find to be a lot more pleasant to read.
.I toolchain
is a short identifier for the specified toolchain; at the moment that's either
"gnu", "borland" or "msvc". since icemake will only handle these three
toolchains.
.I vendor
is either "generic" (the default) or any custom vendor code that some compilers
may be using. Gentoo, for example, seems to favour "pc" and "unknown".

.B ALL
components other than
.I prefix
are entirely optional, and icemake will simply use the file that it deems more
"specific" over more general versions of a file; for example a
"src/linux/x86-64/gnu/memory.s" is more specific than a "src/linux/memory.c" or
even a "src/posix/memory.c".

Even though these file lookup rules seem complex to describe, in fact they're
quite simple once you get the hang of them, and they have the added bonus of
giving all icemake programmes a common feel to the layout of the source tarball.
In general you'll find that these rules tend to make icemake do
the-right-thing(tm).

.SH Example
This is an example file for a programme called "foo" that is using libcurie
with two source files and two documentation files. Yes, the files really do look
that simple.

(programme "foo" libcurie
  (name "Foo")
  (description "My fair programme")
  (version "1")

  (code "foo" "bar")

  (documentation
        "description" "foo"))

.SH AUTHOR
Magnus Deininger <magnus.deininger@student.uni-tuebingen.de>

.SH SEE ALSO
.BR icemake (1),
.BR ice (1)
