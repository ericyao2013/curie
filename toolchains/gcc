TOOLCHAINS:=$(strip $(TOOLCHAINS) gcc)
LIBRARY_OBJECTS=

ifeq ($(toolchain),gcc)
CFLAGS+=$(if $(OPTIMISE_FOR_SIZE),-fdata-sections -ffunction-sections)
LDFLAGS+=$(if $(OPTIMISE_FOR_SIZE),-Wl$(comma)--gc-sections)
COMPATIBLE_OS:=$(strip $(COMPATIBLE_OS) posix ansi)
COMPATIBLE_TOOLCHAIN:=$(strip $(COMPATIBLE_TOOLCHAIN) gnu)

# ignore the default link rule
%: %.o

# build C source files in C99 mode
%.o: src/%.c
	@$(ECHO) CC $@
	@$(CC) -c -Iinclude/ -std=c99 -Wall -pedantic $(CFLAGS) $($*_CFLAGS) $< -o $@

# build C test cases in C99 mode
test-case/%: src/test-case/%.c $$(LIBRARY_OBJECTS)
	@$(ECHO) CC [TEST] $@
	@$(CC) -c -Iinclude/ -std=c99 -Wall -pedantic $(CFLAGS) $($*_CFLAGS) $< -o $@.o
	@$(ECHO) LD [TEST] $@
	@$(CC) $(LDFLAGS) $($*_CFLAGS) $@.o $(BOOTSTRAP_LDFLAGS) $(LIBRARY_OBJECTS) -o $@

# build C source files for PIC targets in C99 mode
%.pic.o: src/%.c
	@$(ECHO) CC $@
	@$(CC) -c -Iinclude/ -std=c99 -Wall -pedantic $(CFLAGS) $($*_CFLAGS) -fPIC $< -o $@

VERSIONS:=current

# link binaries
bin/%: $$($$*_OBJECTS)
	@$(ECHO) LD $@
	@rm -f $@ $@.$($*_VERSION)
	@$(CC) $(LDFLAGS) $($*_LDFLAGS) $(addprefix -l,$(filter-out $(HAVE_LIBRARIES),$($*_LIBRARIES))) $^ -o $@.$($*_VERSION)
	@$(SYMLINK) $(notdir $@.$($*_VERSION)) $@

# link shared libraries
lib/lib%.so: $$($$*_OBJECTS_PIC)
	@$(ECHO) LD $@
	@rm -f $@ $@.$($*_VERSION)
	@$(CC) -shared $(LDFLAGS) $($*_LDFLAGS) -fPIC $^ -o $@.$($*_VERSION)
	@$(SYMLINK) $(notdir $@.$($*_VERSION)) $@

# link static libraries
lib/lib%.a: $$($$*_OBJECTS)
	@$(ECHO) AR $@
	@rm -f $@ $@.$($*_VERSION)
	@$(AR) $(ARFLAGS) $($*_ARFLAGS) $@.$($*_VERSION) $^
	@$(SYMLINK) $(notdir $@.$($*_VERSION)) $@
endif
